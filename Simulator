"Burst Behaviour"

package application;


public class Burst implements Task {

	boolean type;
	int timeNeeded;
	int timeWorked;

	public Burst(boolean type, int timeNeeded, int timeWorked) {
		super();
		this.type = type;
		this.timeNeeded = timeNeeded;
		this.timeWorked = timeWorked;
	}

	public void applyWork(int timeUnit) {
		timeNeeded -= timeUnit;
		timeWorked += timeUnit;
	}

	@Override
	protected Object Task() throws TaskNotSupportedException {
		// TODO Auto-generated method stub
		return super.clone();
	}
}





"Priority with tree"

package binary_treesis

   noLocation : exception;

   type location is private;
   type binary_tree is access cell;

   procedure add_left (l : in out binary_tree; e : in element);
   procedure add_right (l : in out binary_tree; e : in element);

   function get_left (l : in binary_tree) return binary_tree;
   function get_right (l : in binary_tree) return binary_tree;

   procedure put (l : in binary_tree);

   procedure delete (l : in out binary_tree; e : in element);

   procedure duplicate (src : in binary_tree; dest : in out binary_tree);

private

   type cell is record
      left, right : binary_tree;
      info        : element;
   end record;

end binary_tree;




"Fork to minimize task heaviness"

#include <stdio.h> 
#include <stdlib.h> 
#include <unistd.h> 
#include <sys/types.h>
#include <sys/wait.h> 

#define GB 1000000000ULL 

int read_file(const char * filename , unsigned char buffer[]); 
int write_file(const char * filename , unsigned char buffer[]); 
void process_inbound(unsigned char buffer[]); 
void process_outbound(unsigned char buffer[]); 
void joint_processing(unsigned char inbound[], unsigned char outbound []);

unsigned char inbound_data[1 * GB]; 
unsigned char outbound_data[1 * GB]; 
int main(int argc , char * argv[]) {

	pid_t worker_inbound , worker_outbound; 
	read_file("server_306_inbound.in", inbound_data); 
	read_file("server_306_outbound.in", outbound_data); 
	worker_inbound = fork(); 
	if (worker_inbound == 0) {

	process_inbound(inbound_data); 
	write_file("/tmp/server_306_inbound.tmp", inbound_data); 

	 exit(0); 
 } 

	worker_outbound = fork(); 
	if (worker_outbound == 0)




